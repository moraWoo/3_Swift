Вопрос был «для чего», хотя ответа я так и не прочитал. Как минимум, они нужны для возможности работы с дженериками. На мой взгляд, это также современный подход к и альтернатива для (множественного) наследования. Вообще, Protocol Oriented Programming — это целая архитектурная философия, то есть ещё и богатая почва для холивара. Поэтому вопрос с подвохом.

Протоколы (protocols) в Swift - это абстрактные типы, которые определяют набор требований (requirements), которые могут быть реализованы классами, структурами или перечислениями. Протоколы позволяют определять, какие свойства, методы или другие элементы должны быть реализованы объектом, который принимает этот протокол.

Протоколы позволяют улучшить модульность и повторное использование кода в Swift. Они могут использоваться для определения общих интерфейсов, которые будут реализованы разными типами объектов, включая объекты из сторонних библиотек или фреймворков. Это позволяет разработчикам легко создавать обобщенный код, который может работать с разными типами данных, которые соответствуют одному и тому же протоколу.

Кроме того, протоколы могут использоваться для достижения множественного наследования в Swift, поскольку классы могут реализовывать несколько протоколов одновременно. Протоколы также могут быть использованы для создания расширений (extensions) для существующих типов данных, что позволяет добавлять новую функциональность к существующим объектам без необходимости изменения их исходного кода.

Протоколы в Swift это набор правил, которые нужно выполнить для того, чтобы объект мог использовать этот протокол. Протоколы позволяют создавать гибкий и расширяемый код, который может работать с разными типами данных, которые соответствуют одному и тому же протоколу. Например, если у вас есть протокол "игрушка", то любой объект, который соответствует этому протоколу, должен иметь некоторые свойства и методы, например, метод "играть". Протоколы также позволяют создавать обобщенный код, который может работать с разными типами данных, что соответствуют одному и тому же протоколу, что делает ваш код более гибким и переиспользуемым.
