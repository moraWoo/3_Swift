1. Forced Unwrapping (принудительное развертывание)
let optionalValue: Int? = 42
let forcedValue = optionalValue! // используем оператор "!", чтобы принудительно развернуть опционал

2.Optional Binding (опциональное связывание) if-let
let optionalValue: Int? = 42

if let unwrappedValue = optionalValue { // используем конструкцию if let, чтобы проверить наличие значения в опционале
    print("The value is \(unwrappedValue)") // если значение есть, выводим его на консоль
} else {
    print("The value is nil") // если значение отсутствует, выводим соответствующее сообщение на консоль
}
func printName(_ name: String?) {
    guard let unwrappedName = name else {
        print("Имя не определено")
        return
    }

    print("Имя: \(unwrappedName)")
}

printName(nil) // Выводит "Имя не определено"
printName("John") // Выводит "Имя: John"

4.Implicitly Unwrapped Optionals (неявно развернутые опционалы)
let optionalValue: Int! = 42 // используем восклицательный знак, чтобы указать, что опционал неявно развернут
let implicitValue = optionalValue // неявно развернутый опционал автоматически разворачивается

5. Nil Coalescing Operator (оператор объединения с nil)
let optionalName: String? = nil
let greeting = "Hello, "

// Используем оператор объединения с nil, чтобы установить значение по умолчанию
let fullName = optionalName ?? "Anonymous"

// Объединяем приветствие и имя в одну строку
let message = greeting + fullName

print(message) // Выводит "Hello, Anonymous" на консоль, так как optionalName равен nil и было использовано значение по умолчанию

6. Oпциональная цепочка (optional chaining)
airplane?.wings?.left?.power = "50%"

// 7. Optional паттерн - безопасно
if case let unwrapped7? = text {
    print(unwrapped7)
}
