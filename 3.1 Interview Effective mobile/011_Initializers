#initilizers

Инициализатор (initializer) в Swift - это специальный метод, который используется для инициализации экземпляра класса, структуры или перечисления до его первого использования. Он вызывается при создании нового объекта и используется для установки начальных значений свойств объекта.

Синтаксис инициализатора выглядит следующим образом:
init(parameters) {
    // код инициализатора
}
где parameters - список параметров, которые необходимо передать при создании объекта.

Виды инициализаторов:
  - Default (встроенный инициализатор)
  - Memberwise (поэлементный инициализатор, только структуры)
  - Failable (иниализатор для опционалов)
  - Required (обязательный иниализатор)
  - Designated (назначенный иниализатор)

1. "Default"
Дефолтный инициализатор - инициализатор без параметров, который создается автоматически, если в классе или структуре не определен ни один инициализатор.

class Car {
    var name = ""
}

//Эти записи одинаковые

class Car {
    var name: String

    init() {
        self.name = ""
    }
}

let tesla = Car()
tesla.name = "Tesla"

2. "Memberwise"
Swift будет автоматически синтезировать инициализатор для структур на основании свойств этой структуры, если вы не предоставите собственных инициализаторов init().

- только в структурах, не в классах
- если установить собственный инициализатор, то поэлементный пропадет

struct Rectangle {
  var width = 0
  var height = 0
}

//Можно также написать вот так, тогда поэлементный пропадет

struct Rectangle {
  var width: Int
  var height: Int

  init(width: Int = 0, height: Int = 0) {
    self.width = width
    self.height = height
  }
}

let square = Rectangle(width: 10, height: 10)

3. "Failable" инициализатор – это инициализатор, который может вернуть какое-либо значение или может вернуть nil. Это своего рода иниализатор для опционалов.

struct Temperature {
    var celsius: Double

    init?(fahrenheit: Double) {
        if fahrenheit < -459.67 {
            return nil
        }
        celsius = (fahrenheit - 32) * 5 / 9
    }
}

let boilingPoint = Temperature(fahrenheit: 212) // создание объекта Temperature
let absoluteZero = Temperature(fahrenheit: -500) // инициализация может вернуть nil, так как значение -500 некорректно

4. "Required"
Обязательный инициализатор как следует из его названия – это инициализатор, который обяательно должен быть реализован во всех подклассах данного класса.

class Vehicle {
    required init() {
        // Этот инициализатор должен быть реализован в подклассе
    }
}

5. "Designated"
Особый метод класса или структуры, который выполняет инициализацию всех свойств экземпляра класса или структуры и обеспечивает правильный порядок инициализации в цепочке наследования.

class Circle {
    var radius: Double
    var circumference: Double {
        2 * .pi * radius
    }

    init(radius: Double) {
        self.radius = radius
    }
}

let earth = Circle(radius: 6371.0)
print(earth.circumference) // 40030.17

6. "Convenience"
Инициализатор, который предоставляет удобный способ инициализации объекта, не обязательно инициализируя все его свойства.
В отличие от назначенных инициализаторов, которые обязательно должны инициализировать все свойства класса или структуры, convenience инициализаторы не требуют инициализации всех свойств.

Важно отметить, что convenience инициализаторы должны вызывать другой инициализатор этого же класса, используя ключевое слово "self.init". Это означает, что инициализация объекта всегда начинается с назначенного инициализатора, который инициализирует все свойства объекта. "Convenience" инициализаторы могут добавлять дополнительную логику для инициализации объекта, но они не могут заменить назначенный инициализатор.

class Point {
    var x: Double
    var y: Double

    init(x: Double, y: Double) {
        self.x = x
        self.y = y
    }

    convenience init(xAndY: Double) {
        self.init(x: xAndY, y: xAndY)
    }
}

Правила для инициализаторов:

class Vehicle {
    var numberOfWheels: Int

    init(numberOfWheels: Int) {
        self.numberOfWheels = numberOfWheels
    }
}

class Car: Vehicle {
    var color: String

    init(numberOfWheels: Int, color: String) {
        self.color = color
        super.init(numberOfWheels: numberOfWheels)
    }

    convenience init(color: String) {
        self.init(numberOfWheels: 4, color: color)
    }

    convenience init() {
        self.init(color: "black")
    }
}

let car1 = Car() //Car
let car2 = Car(color: "black") //Car
let car3 = Car(numberOfWheels: 4, color: "red") //Car
let car4 = Vehicle(numberOfWheels: 4) //Vehicle

print(car1.self) //"__lldb_expr_15.Car\n"
print(car2.color) //"black\n"
print(car3.numberOfWheels) //"4\n"
print(car4.numberOfWheels) //"4\n"

1. Назначенный инициализатор должен вызывать вспогательный инициализатор из своего непосредственного суперкласса.

"Назначенный инициализатор init(numberOfWheels:color:) из класса Car вызывает вспомогательный инициализатор init(numberOfWheels:) из его суперкласса Vehicle:"

init(numberOfWheels: Int, color: String) {
    self.color = color
    super.init(numberOfWheels: numberOfWheels)
}

2. Вспогательный инициализатор должен вызывать другой инициализатор из того же класса.

"Вспомогательный инициализатор init(color:) из класса Car вызывает другой вспомогательный инициализатор self.init(numberOfWheels:color:) из того же класса:"

convenience init(color: String) {
    self.init(numberOfWheels: 4, color: color)
}

3. Вспогательный инициализатор должен в конечном счете вызвать назначенный инициализатор.

"Вспомогательный инициализатор init() из класса Car вызывает другой вспомогательный инициализатор self.init(color:) из того же класса:"

convenience init() {
    self.init(color: "black")
}


#initializers in structs
В структурах инициализаторы могут быть чуть более гибкими, потому что они могут иметь параметры по умолчанию и использовать ключевое слово mutating, если необходимо изменять свойства структуры внутри инициализатора. Вот пример структуры Rectangle с пользовательским инициализатором:

struct Rectangle {
    var width: Double
    var height: Double

    init(width: Double = 0.0, height: Double = 0.0) {
        self.width = width
        self.height = height
    }

    mutating func doubleSize() {
        width *= 2
        height *= 2
    }
}

#initializers in enum
enum CompassPoint {
    case north, south, east, west

    init?(direction: String) {
        switch direction.lowercased() {
        case "north":
            self = .north
        case "south":
            self = .south
        case "east":
            self = .east
        case "west":
            self = .west
        default:
            return nil
        }
    }
}
