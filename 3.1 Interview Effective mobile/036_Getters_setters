Геттеры и сеттеры (getters and setters) - это методы доступа к свойствам объектов, которые используются для получения и установки значений свойств. Они позволяют более гибко управлять доступом к значениям свойств и определять дополнительную логику для работы с ними.

Геттеры используются для получения значения свойства. Они вызываются при обращении к свойству объекта. Сеттеры используются для установки значения свойства. Они вызываются при попытке изменить значение свойства.

В Swift геттеры и сеттеры могут быть определены как для хранимых, так и для вычисляемых свойств.

Хранимые свойства - это свойства, которые хранят конкретное значение. Геттеры и сеттеры для хранимых свойств используются для доступа к этим значениям. Например:

class MyClass {
    var myProperty: Int = 0 {
        didSet {
            print("myProperty is now \(myProperty)")
        }
    }
}

let myObject = MyClass()
myObject.myProperty = 42 // Выведет: "myProperty is now 42"

В этом примере мы определяем класс MyClass с хранимым свойством myProperty. Мы определяем сеттер для свойства myProperty, который выводит сообщение в консоль каждый раз, когда значение свойства изменяется. При установке значения свойства myProperty у объекта myObject вызывается этот сеттер и выводится сообщение в консоль.

class Circle {
    var radius: Double

    var diameter: Double {
        get {
            return radius * 2
        }
        set(newDiameter) {
            radius = newDiameter / 2
        }
    }

    init(radius: Double) {
        self.radius = radius
    }
}

let circle = Circle(radius: 5.0)
print(circle.diameter) // Выведет: 10.0

circle.diameter = 20.0
print(circle.radius) // Выведет: 10.0

В этом примере мы определяем класс Circle с вычисляемым свойством diameter, которое вычисляет диаметр окружности на основе радиуса. Мы определяем геттер для свойства diameter, который вычисляет диаметр на основе радиуса и возвращает его как значение свойства.
