Функции высшего порядка в Swift - это функции, которые могут принимать другие функции в качестве аргументов или возвращать функции в качестве результата.

Примеры функций высшего порядка в Swift:

1. map: принимает функцию и применяет ее к каждому элементу в коллекции, возвращая новую коллекцию с результатами
let numbers = [1, 2, 3, 4, 5]
let doubledNumbers = numbers.map { $0 * 2 }
// doubledNumbers = [2, 4, 6, 8, 10]

2. filter: принимает функцию, которая возвращает булево значение, и фильтрует элементы в коллекции в соответствии с этим значением
let numbers = [1, 2, 3, 4, 5]
let evenNumbers = numbers.filter { $0 % 2 == 0 }
// evenNumbers = [2, 4]

3. reduce: принимает функцию и применяет ее к последовательности, сокращая последовательность до единственного значения
let numbers = [1, 2, 3, 4, 5]
let sum = numbers.reduce(0) { $0 + $1 }
// sum = 15

В Swift $0 и $1 - это синтаксические аргументы замыкания, передаваемого в качестве параметра функции высшего порядка, в данном случае reduce.

$0 представляет первый аргумент (accumulator) в выражении reduce, который в данном примере представляет сумму, а $1 представляет элемент коллекции, проходимый в данный момент.

Таким образом, в данном примере замыкание { $0 + $1 } добавляет текущий элемент коллекции ($1) к предыдущему результату ($0) и возвращает новый результат. При первой итерации $0 равно 0, что является начальным значением accumulator в методе reduce.

В замыкании можно использовать не только $0 и $1, но и $2, $3 и так далее, в зависимости от количества аргументов, которые оно принимает.

Например, если мы используем метод reduce на массиве трехэлементном массиве чисел, мы можем использовать $0, $1, и $2 в замыкании, чтобы выполнить операцию над тремя элементами массива:
let numbers = [1, 2, 3]
let result = numbers.reduce(0) { $0 + $1 + $2 }
// result = 6
В данном примере замыкание складывает все три элемента массива, используя $0, $1 и $2. Обратите внимание, что начальное значение accumulator равно 0, что передается как первый аргумент в метод reduce.

4. sort: принимает функцию, которая сравнивает два элемента, и сортирует элементы в коллекции в соответствии с результатами сравнения
let numbers = [5, 2, 4, 1, 3]
let sortedNumbers = numbers.sorted { $0 < $1 }
// sortedNumbers = [1, 2, 3, 4, 5]

5. forEach: принимает функцию и выполняет ее для каждого элемента в коллекции
let numbers = [1, 2, 3, 4, 5]
numbers.forEach { print($0) }
// выводит на консоль каждый элемент в массиве numbers

6. compactMap: принимает функцию, которая возвращает необязательное значение, и возвращает новую коллекцию, которая содержит только не-nil значения, полученные после применения функции к каждому элементу коллекции
let strings = ["1", "2", "three", "4", "five"]
let numbers = strings.compactMap { Int($0) }
// numbers = [1, 2, 4]

7. flatMap: принимает функцию, которая возвращает коллекцию, и возвращает новую коллекцию, которая содержит все элементы, полученные после применения функции к каждому элементу коллекции
let arrays = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
let flatArray = arrays.flatMap { $0 }
// flatArray = [1, 2, 3, 4, 5, 6, 7, 8, 9]
