# enums
Перечисления (enums) в Swift представляют собой тип данных, который позволяет создавать новый тип, состоящий из набора определенных значений.

Перечисления определяются с помощью ключевого слова enum и могут содержать одно или несколько значений, которые могут быть именованными или безымянными. В Swift каждый элемент перечисления имеет тип перечисления, который позволяет использовать его в качестве отдельного типа данных.

Например, вот как можно определить перечисление, которое представляет собой типы банковских счетов:
enum AccountType {
    case checking
    case savings
    case investment
}
Здесь мы определили перечисление AccountType, которое содержит три элемента: checking, savings и investment. Теперь мы можем создавать переменные и константы, которые используют тип AccountType, например:
let accountType: AccountType = .savings

Перечисления в Swift могут также содержать дополнительные значения, которые могут быть связаны с каждым элементом. Это называется связанными значениями (associated values) и позволяет создавать более сложные перечисления, которые могут хранить дополнительную информацию.

Например, вот как можно определить перечисление, которое представляет собой различные типы напитков в кофейной машине и связанные значения, такие как количество сахара и молока:
enum CoffeeType {
    case espresso
    case americano
    case latte(sugar: Int, milk: Bool)
}

Здесь мы определили перечисление CoffeeType, которое содержит три элемента: espresso, americano и latte. Элемент latte имеет связанные значения sugar и milk, которые указывают количество сахара и наличие молока в напитке. Теперь мы можем создавать переменные и константы, которые используют тип CoffeeType, и обращаться к связанным значениям:

let myCoffee = CoffeeType.latte(sugar: 2, milk: true)
print("Мой кофе содержит \(myCoffee.sugar) ложки сахара и \(myCoffee.milk ? "молоко" : "нет молока")")

В целом, перечисления в Swift представляют собой удобный способ определения новых типов данных, которые содержат ограниченный набор значений. Они могут использоваться в качестве типов данных для переменных, констант и параметров функций, а также для создания более сложных типов данных, которые могут хранить дополнительную информацию с помощью связанных значений. Перечисления также могут содержать методы и использоваться в качестве аргументов для операторов switch для обработки разных сценариев в коде.
