# enums
Перечисления (enums) в Swift представляют собой тип данных, который позволяет создавать новый тип, состоящий из конечного набора значений.

Перечисления определяются с помощью ключевого слова enum и могут содержать одно или несколько значений, которые могут быть именованными или безымянными. В Swift каждый элемент перечисления имеет тип перечисления, который позволяет использовать его в качестве отдельного типа данных.

Преимущества:
- Улучшает читаемость кода
- Можно описать классами или структурами, но если нам не нужно излишество то стоит  использовать enum

"mutating"
enum Direction {
  case north
  case south
  case west
  case east

  mutating functurn90clockwise() {
    switch self {
      case .west:
        self = .north
      case .east:
        self = .south
      case .north:
        self = .east
      case .south:
        self = .west
    }
  }
}
var direction = Direction.west
direction = .south
direction.functurn90clockwise()

switch self {
  case .west:
    print("west")
  case .east:
    print("east")
  case .north:
    print("north")
  case .south:
    print("south ")
}
// west

# protocol caseIterable

Protocol "CaseIterable" дает доступ коллекциям всех кейсов enum, enum должен быть без ассоциативных типов.

enum Direction: CaseIterable {
  case north
  case south
  case west
  case east
}
let direction = Direction.allCases

# raw value

enum Direction: String, CaseIterable {
  case north // название строки будет такое же как название кейса
  case south = "South"
  case west = "West"
  case east
}
for enumValue in Direction.allCases {
  print(enumValue)
}
// north
// south
// west
// east
for enumValue in Direction.allCases {
  print(enumValue.rawValue)
}
// north
// South
// West
// east

# Initializing from raw value, Failable initializer
let direction = Direction(rawValue: "West") //west

# implicity assigned raw value

enum Direction: Int, CaseIterable {
  case north = 77
  case south
  case west
  case east
}
for enumValue in Direction.allCases {
  print(enumValue)
}
// 77
// 78
// 79
// 80



Перечисления в Swift могут также содержать дополнительные значения, которые могут быть связаны с каждым элементом. Это называется связанными значениями (associated values) и позволяет создавать более сложные перечисления, которые могут хранить дополнительную информацию.

Например, вот как можно определить перечисление, которое представляет собой различные типы напитков в кофейной машине и связанные значения, такие как количество сахара и молока:
enum CoffeeType {
    case espresso
    case americano
    case latte(sugar: Int, milk: Bool)
}

Здесь мы определили перечисление CoffeeType, которое содержит три элемента: espresso, americano и latte. Элемент latte имеет связанные значения sugar и milk, которые указывают количество сахара и наличие молока в напитке. Теперь мы можем создавать переменные и константы, которые используют тип CoffeeType, и обращаться к связанным значениям:

let myCoffee = CoffeeType.latte(sugar: 2, milk: true)
print("Мой кофе содержит \(myCoffee.sugar) ложки сахара и \(myCoffee.milk ? "молоко" : "нет молока")")

В целом, перечисления в Swift представляют собой удобный способ определения новых типов данных, которые содержат ограниченный набор значений. Они могут использоваться в качестве типов данных для переменных, констант и параметров функций, а также для создания более сложных типов данных, которые могут хранить дополнительную информацию с помощью связанных значений. Перечисления также могут содержать методы и использоваться в качестве аргументов для операторов switch для обработки разных сценариев в коде.
