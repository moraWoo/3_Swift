# enums
Перечисления (enums) в Swift представляют собой тип данных, который позволяет создавать новый тип, состоящий из конечного набора значений.

Перечисления определяются с помощью ключевого слова enum и могут содержать одно или несколько значений, которые могут быть именованными или безымянными. В Swift каждый элемент перечисления имеет тип перечисления, который позволяет использовать его в качестве отдельного типа данных.

Преимущества:
- Улучшает читаемость кода
- Можно описать классами или структурами, но если нам не нужно излишество то стоит использовать enum

"mutating"
enum Direction {
  case north
  case south
  case west
  case east

  mutating functurn90clockwise() {
    switch self {
      case .west:
        self = .north
      case .east:
        self = .south
      case .north:
        self = .east
      case .south:
        self = .west
    }
  }
}
var direction = Direction.west
direction = .south
direction.functurn90clockwise()

switch self {
  case .west:
    print("west")
  case .east:
    print("east")
  case .north:
    print("north")
  case .south:
    print("south ")
}
// west

# protocol caseIterable

Protocol "CaseIterable" дает доступ коллекциям всех кейсов enum, enum должен быть без ассоциативных типов.

enum Direction: CaseIterable {
  case north
  case south
  case west
  case east
}
let direction = Direction.allCases

# raw value

enum Direction: String, CaseIterable {
  case north // название строки будет такое же как название кейса
  case south = "South"
  case west = "West"
  case east
}
for enumValue in Direction.allCases {
  print(enumValue)
}
// north
// south
// west
// east
for enumValue in Direction.allCases {
  print(enumValue.rawValue)
}
// north
// South
// West
// east

# Initializing from raw value, Failable initializer
let direction = Direction(rawValue: "West") //west

# implicity assigned raw value

enum Direction: Int, CaseIterable {
  case north = 77
  case south
  case west
  case east
}
for enumValue in Direction.allCases {
  print(enumValue)
}
// 77
// 78
// 79
// 80

# associated values
позволяют хранить любые данные в enum и эти данные будут привязаны к конкретному кейсу

enum Direction {
  case north(damage: Int, equipment: [String], Int)
  case south(health: Int)
  case west(name: String)
  case east(money: Double)
}
// сохраняем значения
var direction = Direction.north(damage: 40, equipment: ["hammer", "knife"], 10)
// достаем значения
switch direction {
  case .west:
    print("west")
  case .east:
    print("east")
  case .north(let gjhgj):
    print(gjhgj)
  case .south:
    print("south ")
}

//(damage: 40, equipment: ["hammer", "knife"], 10)

# if case синтаксис
если нужно проверить только один кейс
if case .north = direction {
  print("замерзнуть")
}

# recursive enumeration, indirect enum
enum может содержать один или несколько enum
indirect enum MessageType {
  case image(UIImage)
  case text(String)
  case file(Data)
  case reply(MessageType)
}

let messageType = MessageType.reply(MessageType.image(UIImage()))
