#access modifiers
https://sparrowcode.io/ru/tutorials/access-control

Swift имеет четыре модификатора доступа, которые определяют уровень доступа к свойствам, методам, классам, протоколам и т.д.:

1. "public"
Обычно его используют для фреймворков. Модули имеют доступ к публичным объектам других модулей.
За пределами исходного модуля public-классы не могут быть суперклассами, а их свойства и методы нельзя переопределять.

2. "internal"
Внутренний уровень стоит по умолчанию для свойств и методов и предоставляет доступ внутри модуля. Явно указывать internal не требуется.

3. "fileprivate"
Похож на private. Доступ к объектам этого уровня есть только у объектов из того же файла. fileprivate пригодится, когда нам нужны дополнительные объекты или вычисления в рамках одного файла.

4. "private"
Ограничивает доступ к свойствам и методам внутри структур, классов и перечислений. private — самый строгий уровень, он скрывает вспомогательную логику.

Кроме того, Swift также имеет два модификатора доступа, которые ограничивают доступ к классам:

5. "open"
Похож на public - разрешает доступ из других модулей. Используется только для классов, их свойств и методов.
Как в определяющем, так и в импортирующем модуле open-классы могут быть суперклассами, а их свойства и методы могут переопределяться подклассами.

6. "final"
Класс с модификатором доступа final не может быть наследован. final используется, когда вы не хотите, чтобы кто-то наследовал ваш класс и переопределял его методы или свойства.

Вот небольшой пример использования модификаторов доступа в Swift:
public class MyClass {
    internal var internalProperty: Int = 0
    fileprivate var filePrivateProperty: String = "filePrivate"
    private var privateProperty: Double = 3.1415

    open func openMethod() {
        print("This method can be overridden by subclasses in another module.")
    }

    final func finalMethod() {
        print("This method cannot be overridden by subclasses.")
    }
}

Да, модификаторы доступа можно применять к методам и свойствам в Swift. Модификатор доступа определяет, какие части кода имеют доступ к методам и свойствам. В классах, структурах и перечислениях, вы можете использовать модификаторы доступа для указания того, какие методы и свойства могут быть использованы за пределами объекта или типа.
