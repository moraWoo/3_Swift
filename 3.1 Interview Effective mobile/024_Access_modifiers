#access modifiers
Swift имеет четыре модификатора доступа, которые определяют уровень доступа к свойствам, методам, классам, протоколам и т.д.:

1. public: Сущность с модификатором доступа public доступна из любого исходного файла, а также из любой модуля, импортированного в текущий модуль. public используется, когда вам нужно, чтобы сущность была доступна для использования в другом модуле или в коде, написанном в другом языке программирования.
2. internal: Сущность с модификатором доступа internal доступна только в пределах текущего модуля. Это является модификатором доступа по умолчанию, если вы не укажете другой модификатор доступа.
3. fileprivate: Сущность с модификатором доступа fileprivate доступна только в том файле, в котором она была определена. Это означает, что вы можете использовать fileprivate для ограничения доступа к свойствам или методам из других частей того же файла.
4. private: Сущность с модификатором доступа private доступна только внутри той области видимости, в которой она была определена. Это может быть внутри метода, функции, цикла или блока кода. private используется, когда вам нужно ограничить доступ к свойству или методу внутри определенной области видимости.

Кроме того, Swift также имеет два модификатора доступа, которые ограничивают доступ к классам:

5. open: Класс с модификатором доступа open может быть подклассом в любом другом модуле, импортированном в текущий модуль. open используется, когда вы хотите, чтобы класс был доступен для наследования из другого модуля.
6. final: Класс с модификатором доступа final не может быть наследован. final используется, когда вы не хотите, чтобы кто-то наследовал ваш класс и переопределял его методы или свойства.

Вот небольшой пример использования модификаторов доступа в Swift:
public class MyClass {
    internal var internalProperty: Int = 0
    fileprivate var filePrivateProperty: String = "filePrivate"
    private var privateProperty: Double = 3.1415

    open func openMethod() {
        print("This method can be overridden by subclasses in another module.")
    }

    final func finalMethod() {
        print("This method cannot be overridden by subclasses.")
    }
}

Да, модификаторы доступа можно применять к методам и свойствам в Swift. Модификатор доступа определяет, какие части кода имеют доступ к методам и свойствам. В классах, структурах и перечислениях, вы можете использовать модификаторы доступа для указания того, какие методы и свойства могут быть использованы за пределами объекта или типа.
