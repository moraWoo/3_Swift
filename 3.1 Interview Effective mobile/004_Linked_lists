Связные списки:
Связный список - это линейная структура данных, состоящая из элементов, называемых узлами, которые содержат ссылки на следующий узел в последовательности. Узлы хранят данные и указатель (ссылку) на следующий узел в списке.

В простейшем виде, связный список имеет голову, которая указывает на первый узел, и последний узел указывает на "ничто" или nil, сигнализируя о конце списка. Связные списки могут быть однонаправленными (где узлы указывают только на следующий узел) или двунаправленными (где узлы указывают как на предыдущий, так и на следующий узел).

Связные списки обладают рядом преимуществ перед массивами, такими как динамический размер, эффективное добавление и удаление элементов, особенно в начале или конце списка. Однако, доступ к элементам связного списка происходит последовательно, что может быть менее эффективным, чем прямой доступ к элементам массива.

В целом, деревья и связные списки предлагают разные методы хранения и организации данных, каждый со своими преимуществами и недостатками

Связный список (однонаправленный):
class Node {
    var value: Int
    var next: Node?

    init(value: Int, next: Node? = nil) {
        self.value = value
        self.next = next
    }
}

let thirdNode = Node(value: 3)
let secondNode = Node(value: 2, next: thirdNode)
let firstNode = Node(value: 1, next: secondNode)

Здесь мы создаем однонаправленный связный список с использованием класса Node. Список состоит из трех узлов со значениями 1, 2 и 3. Узлы содержат ссылку на следующий узел в списке. Последний узел указывает на nil, что означает конец списка.

Теперь у нас есть связный список со следующей структурой:
1 -> 2 -> 3 -> nil

Связные списки:

Плюсы:

Динамический размер: Связные списки могут легко изменять свой размер, добавляя или удаляя элементы.
Эффективное добавление/удаление: Добавление или удаление элементов из начала списка или, в случае двунаправленного списка, из конца списка, может быть выполнено быстро и эффективно.
Нет необходимости в дополнительной памяти для реализации: В отличие от массивов, связные списки не требуют непрерывного блока памяти.
Минусы:

Неэффективный доступ к элементам: Чтобы получить доступ к элементу списка, нужно пройти последовательно от головы списка, что может быть медленным для больших списков.
Больше памяти на элемент: Каждый элемент связного списка использует дополнительную память для хранения указателей на следующий (и, возможно, предыдущий) элемент.
