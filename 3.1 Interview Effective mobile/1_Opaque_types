#Opaque types

Opaque types в Swift – это типы, которые скрывают свою конкретную реализацию от вызывающего кода, предоставляя только протокол, которому они соответствуют. Вместо того чтобы указывать конкретный тип, который должен быть возвращен, функция или метод может возвращать некоторую реализацию протокола без раскрытия конкретного типа. Это позволяет сохранить инкапсуляцию и гибкость в коде.
Определение функции с возвращаемым opaque типом в Swift выглядит следующим образом:

func createShape() -> some ShapeProtocol {
  // Возвращаем конкретную реализацию ShapeProtocol
}

Здесь some ShapeProtocol указывает, что функция createShape() возвращает некоторую реализацию протокола ShapeProtocol, но не указывает конкретный тип. Вызывающий код знает только о том, что возвращаемый объект соответствует протоколу ShapeProtocol, но не имеет доступа к его конкретной реализации.

Определение opaque типов улучшает инкапсуляцию, поскольку вызывающий код не может делать предположений о внутреннем устройстве типа и полагается только на протокол, которому он соответствует. Это также позволяет легче изменять внутреннюю реализацию без влияния на вызывающий код.

1. Пример с протоколом Animal:

protocol Animal {
  func makeSound() -> String
}

class Dog: Animal {
  func makeSound() -> String {
    return "Woof!"
  }
}

class Cat: Animal {
  func makeSound() -> String {
    return "Meow!"
  }
}

func getRandomAnimal() -> some Animal {
  return Bool.random() ? Dog() : Cat()
}

let animal = getRandomAnimal()
print(animal.makeSound())

В этом примере у нас есть протокол Animal с функцией makeSound(). У нас есть две реализации этого протокола: Dog и Cat. Функция getRandomAnimal() возвращает некоторый объект, соответствующий протоколу Animal, но мы не знаем, какая именно реализация будет возвращена. В результате, вызывающий код работает только с протоколом Animal.

2. Пример с протоколом Drawable:
import UIKit

protocol Drawable {
  func draw() -> UIImage
}

class Circle: Drawable {
  func draw() -> UIImage {
    // Реализация рисования круга и возвращение UIImage
  }
}

class Square: Drawable {
  func draw() -> UIImage {
    // Реализация рисования квадрата и возвращение UIImage
  }
}

func createDrawable(shape: String) -> some Drawable {
  if shape == "circle" {
        return Circle()
    } else {
        return Square()
    }
}

let drawable = createDrawable(shape: "circle")
let image = drawable.draw()

В данном примере у нас есть протокол Drawable с функцией draw(), которая возвращает UIImage. Есть две реализации этого протокола: Circle и Square. Функция createDrawable(shape:) возвращает некоторый объект, соответствующий протоколу Drawable, но не раскрывает его конкретную реализацию.

Эти примеры демонстрируют, как opaque types могут быть использованы для скрытия конкретных реализаций типов, позволяя вызывающему коду работать только с протоколами и сохранять инкапсуляцию.
