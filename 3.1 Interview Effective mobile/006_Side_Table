# side table
"Side table" - это хэш-таблица с информацией о типах объекта и метаданных во время выполнения программы.
  "ключ" - указатель на объект
  "значение" - информация о типе объекта и метаданные

"Side tabel" используется в:
  - ARC (автоматическое управление памятью)
  - Type checking (проверка типов)
  - Type casting (приведение типов)
  - другие, которые требуют инфу о типах

"Side table" может хранить инфу связанную с объектами класса:
  - "weak reference" (информацию о несильных ссылках)
  - "observers" (наблюдатели)

Каждый объект класса имеет свой собственный side table, в котором хранятся соответствующие данные.

В Swift сборка мусора осуществляется с помощью ARC (Automatic Reference Counting), который отслеживает количество сильных ссылок на объекты. Однако в случае слабых ссылок и наблюдателей, ARC не может надежно отслеживать их использование, поэтому Swift использует side table для управления этими ссылками.

Когда создается слабая ссылка или наблюдатель для объекта класса, Swift добавляет соответствующую запись в side table этого объекта. Если слабая ссылка перестает использоваться или наблюдатель удаляется, Swift удаляет соответствующую запись из side table.

Side table позволяет Swift более точно отслеживать использование слабых ссылок и наблюдателей, что уменьшает вероятность утечек памяти и других проблем, связанных с управлением памятью.

===========================================================================================

Пример использования side table может быть следующим: при создании объекта в Swift, компилятор генерирует код для инициализации side table, который сохраняет информацию о типе объекта. При выполнении программы, side table используется для определения типа объекта во время выполнения, например, при вызове методов объекта или при приведении типов.

В целом, side table является важной частью реализации Swift, которая позволяет решать многие задачи, связанные с управлением памятью и типами объектов во время выполнения программы.

Допустим, мы создаем класс "Фрукты" в Swift, который имеет свойства "название" и "количество". При создании объекта класса "Фрукты" компилятор генерирует код для инициализации side table, который сохраняет информацию о типе объекта, а также информацию о его свойствах.

class Fruit {
    var name: String
    var quantity: Int

    init(name: String, quantity: Int) {
        self.name = name
        self.quantity = quantity
    }
}

При выполнении программы, side table будет использоваться для определения типа объекта во время выполнения, например, при вызове методов объекта:
let apple = Fruit(name: "Apple", quantity: 10)
print(apple.name) // "Apple"
print(apple.quantity) // 10

Side table также может использоваться для проверки типов и приведения типов, например:
if apple is Fruit {
    print("apple is a Fruit")
}

let fruit = apple as Fruit
print(fruit.name) // "Apple"

В данном случае side table используется для хранения информации о типе объекта "apple", а также для проверки типа и приведения типа объекта.
