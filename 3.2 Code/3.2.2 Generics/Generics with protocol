enum StackError: Error {
  case Empty(message: String)
}

protocol Stackable {
  associatedtype Element
  mutating func push(element: Element)
  mutating func pop() -> Element?
  func peek() throws -> Element
  func isEmpty() -> Bool
  func count() -> Int
  subscript(i: Int) -> Element { get }
}

public struct Stack<T>: Stackable {
  public typealias Element = T

  var array: [T] = []

  init(capacity: Int) {
    array.reserveCapacity(capacity)
  }

  mutating func push(element: T) {
    array.append(element)
  }

  mutating func pop() -> T? {
    return array.popLast()
  }

  func peek() throws -> T {
    guard !isEmpty(), let lastElement = array.last else {
      throw StackError.Empty(message: "Array is empty")
    }
    return lastElement
  }

  func isEmpty() -> Bool {
    return array.isEmpty
  }

  func count() -> Int {
    return array.count
  }
}

extension Stack: Collection {
  public func makeIterator() -> AnyIterator<T> {
    var curr = self
    return AnyIterator { curr.pop() }
  }

  public subscript(i: Int) -> T {
    return array[i]
  }

  public var startIndex: Int {
    return array.startIndex
  }

  public var endIndex: Int {
    return array.endIndex
  }

  public func index(after i: Int) -> Int {
    return array.index(after: i)
  }
}

extension Stack: CustomStringConvertible {
  public var description: String {
    let header = "***Stack Operations start***"
    let footer = "***Stack Operation end***"
    let elements = array.map{ "\($0)" }.joined(separator: "\n")
    return header + elements + footer
  }
}

var stack = Stack<Int>(capacity: 10)
stack.push(element: 1)
stack.pop()

stack.push(element: 3)
stack.push(element: 4)
print(stack)
// ***Stack Operations start***3
// 4***Stack Operation end***
