Акторы это новый тип данных
И они концептуально похожи на классы, которые можно безопасно использовать в параллельных средах

Разница между классом и актором:
В акторах swift позволяет менять внутреннее состояние объекта только из одного потока одновременно.

import Foundation
  // Actors
// в однопоточной среде данный код будет выполняться последовательно и нормально, но в многопоточной тут будет race condition
class RiskyCollector {
  var deck: Set<String>

  init (deck: Set<String>) {
    self.deck = deck
  }

  func send (card: String, to person: RiskyCollector) -> Bool {
    guard deck.contains (card) else { return false }

    deck.remove(card)
    person.transfer(card)
    return true
  }

  func transfer(_ card: String) {
    deck.insert(card)
  }
}

// Акторы решают эту проблему с помощью изоляции своего внутренного состояния. Swift автоматически отправляет все запросы к акторам в последовательную очередь. Это позволяет избежать race condition
// Это новый тип данных, как класс, структура или перечисление
// Метод send должен быть асинхронным
// Экземпляры актора могут использовать свои собственные свойства и методы синхронно и асинхронно
// Но при взаимодействии с другим экземпляром актора вызовы должны выполняться асинхронно
// Подписаны под протокол Actor
// Изменять значения свойств извне актора невозможно
// Акторы общаются между собой посредством отправки сообщений, эти сообщения выстраиваются в последовательную очередь

actor SafeCollector {
  var deck: [String]

  init (deck: [String]) {
    self.deck = deck
  }

  func send (card: String, to person: RiskyCollector) async {
    if let cardIndex = deck.firstIndex(of: card) {
      deck.remove(at: cardIndex)
      await person.transfer(card)
    }
  }

  func transfer(_ card: String) {
    deck.append(card)
  }
}

// Можно изолировать глобальное состояние потока данных от гонок, с помощью актора MainActor.
// Таким атрибутом можно помечать свойства и методы доступ к которым должен быть из основного потока.

class StorageManager {
  func save() -> Bool {
    guard Thread.isMainThread else { return false }
    print("Saving data...")
    return true
  }
}

actor StorageManagerActor {
  @MainActor func save() -> Bool {
    print("Saving data...")
    return true
  }
}

let storageManagerActor = StorageManagerActor()
Task {
  await storageManagerActor.save()
}
